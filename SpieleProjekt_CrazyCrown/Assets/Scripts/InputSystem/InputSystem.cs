//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/InputSystem/InputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputSystem: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputSystem"",
    ""maps"": [
        {
            ""name"": ""CharacterInput"",
            ""id"": ""d34f4f74-9073-47f5-b9d6-9ac8e70733d6"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""25127c79-98a4-4118-b0aa-bd9a2930683e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""a2c7be58-ffa7-4fed-9d82-ec40f2f42177"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Salute"",
                    ""type"": ""Button"",
                    ""id"": ""a2b2807c-f774-4d7d-817b-116a82f658d8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""dc077a28-15c2-464b-957d-d20da4675e96"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PickUpItem"",
                    ""type"": ""Button"",
                    ""id"": ""13081611-c87b-4668-af51-59d726ed4206"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""c99208e4-6d75-40ec-9982-2931b50d06c7"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""73ee4baa-d98b-428b-b992-f143e7786a09"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1fc4ef9a-0ba4-4c3f-83a3-6f9925c486da"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""dfa7a7d9-056f-45f0-b7a2-9ac74dfc2154"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b5b3a95-ca29-4a22-ac0c-b362904170e6"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Salute"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0d131247-5e9d-4188-98da-233f5cf743d0"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dcd8340a-e763-40ab-8053-2cc898ae8418"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PickUpItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CharacterInput
        m_CharacterInput = asset.FindActionMap("CharacterInput", throwIfNotFound: true);
        m_CharacterInput_Move = m_CharacterInput.FindAction("Move", throwIfNotFound: true);
        m_CharacterInput_Interact = m_CharacterInput.FindAction("Interact", throwIfNotFound: true);
        m_CharacterInput_Salute = m_CharacterInput.FindAction("Salute", throwIfNotFound: true);
        m_CharacterInput_Crouch = m_CharacterInput.FindAction("Crouch", throwIfNotFound: true);
        m_CharacterInput_PickUpItem = m_CharacterInput.FindAction("PickUpItem", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CharacterInput
    private readonly InputActionMap m_CharacterInput;
    private List<ICharacterInputActions> m_CharacterInputActionsCallbackInterfaces = new List<ICharacterInputActions>();
    private readonly InputAction m_CharacterInput_Move;
    private readonly InputAction m_CharacterInput_Interact;
    private readonly InputAction m_CharacterInput_Salute;
    private readonly InputAction m_CharacterInput_Crouch;
    private readonly InputAction m_CharacterInput_PickUpItem;
    public struct CharacterInputActions
    {
        private @InputSystem m_Wrapper;
        public CharacterInputActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_CharacterInput_Move;
        public InputAction @Interact => m_Wrapper.m_CharacterInput_Interact;
        public InputAction @Salute => m_Wrapper.m_CharacterInput_Salute;
        public InputAction @Crouch => m_Wrapper.m_CharacterInput_Crouch;
        public InputAction @PickUpItem => m_Wrapper.m_CharacterInput_PickUpItem;
        public InputActionMap Get() { return m_Wrapper.m_CharacterInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterInputActions set) { return set.Get(); }
        public void AddCallbacks(ICharacterInputActions instance)
        {
            if (instance == null || m_Wrapper.m_CharacterInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CharacterInputActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @Salute.started += instance.OnSalute;
            @Salute.performed += instance.OnSalute;
            @Salute.canceled += instance.OnSalute;
            @Crouch.started += instance.OnCrouch;
            @Crouch.performed += instance.OnCrouch;
            @Crouch.canceled += instance.OnCrouch;
            @PickUpItem.started += instance.OnPickUpItem;
            @PickUpItem.performed += instance.OnPickUpItem;
            @PickUpItem.canceled += instance.OnPickUpItem;
        }

        private void UnregisterCallbacks(ICharacterInputActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @Salute.started -= instance.OnSalute;
            @Salute.performed -= instance.OnSalute;
            @Salute.canceled -= instance.OnSalute;
            @Crouch.started -= instance.OnCrouch;
            @Crouch.performed -= instance.OnCrouch;
            @Crouch.canceled -= instance.OnCrouch;
            @PickUpItem.started -= instance.OnPickUpItem;
            @PickUpItem.performed -= instance.OnPickUpItem;
            @PickUpItem.canceled -= instance.OnPickUpItem;
        }

        public void RemoveCallbacks(ICharacterInputActions instance)
        {
            if (m_Wrapper.m_CharacterInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICharacterInputActions instance)
        {
            foreach (var item in m_Wrapper.m_CharacterInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CharacterInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CharacterInputActions @CharacterInput => new CharacterInputActions(this);
    public interface ICharacterInputActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnSalute(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
        void OnPickUpItem(InputAction.CallbackContext context);
    }
}
